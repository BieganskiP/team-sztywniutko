{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAwBC,SAASC,cAAc,eAerDC,iBACE,MAAOC,EAAgBC,EAAcC,SAAwBC,QAAQC,IAAI,CACvEC,MACE,6GAEFA,MAAM,uFACNA,MAAM,4FAGR,IAAKL,EAAeM,GAAI,CACtB,MAAMC,EAAU,yBAAyBP,EAAeQ,SACxD,MAAM,IAAIC,MAAMF,E,CAElB,IAAKN,EAAaK,GAAI,CACpB,MAAMC,EAAU,yBAAyBN,EAAaO,SACtD,MAAM,IAAIC,MAAMF,E,CAElB,IAAKL,EAAeI,GAAI,CACtB,MAAMC,EAAU,yBAAyBL,EAAeM,SACxD,MAAM,IAAIC,MAAMF,E,CAGlB,MAAMG,QAAeV,EAAeW,OAC9BC,QAAsBX,EAAaU,OACnCE,QAAeX,EAAeS,OACpC,MAAO,CAACD,EAAQE,EAAcE,OAAQD,EAAOA,O,EAG/CE,GACGC,MAAK,EAAEN,EAAQE,EAAeC,OAWjC,SAAuBH,EAAQE,EAAeC,GAC5CH,EAAOO,QAAQC,SAAQC,IACrB,IAAIC,EAAQD,EAAMC,MACdC,EAtDR,SAA2BC,EAAKC,GAC9B,IAAIC,EAAS,GAOb,OANAF,EAAIJ,SAAQO,IACV,IAAIC,EAAQH,EAAII,MAAKC,GAAKA,EAAEH,KAAOA,IAAII,UACzBC,IAAVJ,GACFF,EAAOO,KAAKL,EAAM,IAGfF,EAAOQ,KAAK,K,CA8CFC,CAAkBd,EAAMe,UAAWrB,GAC9CsB,EAAOhB,EAAMiB,aAAaC,MAAM,EAAG,GACnCC,EAAS1B,EAAc2B,SAAW,OAASpB,EAAMqB,YACrD5C,EAAsB6C,mBACpB,YACA,6CACoCtB,EAAMM,0DACRa,UAAelB,qGAEJA,8DACEC,OAAcc,+BAI/D,EAAAzC,EAAAgD,cAAa,G,CA3BbC,CAAcjC,EAAQE,EAAeC,EAAO,IAI7C+B,OAAMC,IACLC,QAAQD,MACN,+CAAiDA,EAAMtC,QACxD","sources":["src/js/main.js"],"sourcesContent":["let apiKey = 'bfe21f4061b2869ccff2b4c323a3a257';\n\nconst movieLibraryContainer = document.querySelector('.movie-set');\n\nimport { attachModal } from './modal.js';\n\nfunction mapGenreIdsToName(ids, map) {\n  let result = [];\n  ids.forEach(id => {\n    let genre = map.find(x => x.id === id).name;\n    if (genre !== undefined) {\n      result.push(genre);\n    }\n  });\n  return result.join(', ');\n}\n\nasync function fetchMoviesAndCategories() {\n  const [moviesResponse, confResponse, genresResponse] = await Promise.all([\n    fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US&page=1`\n    ),\n    fetch(`https://api.themoviedb.org/3/configuration?api_key=${apiKey}`),\n    fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}`),\n  ]);\n\n  if (!moviesResponse.ok) {\n    const message = `An error has occured: ${moviesResponse.status}`;\n    throw new Error(message);\n  }\n  if (!confResponse.ok) {\n    const message = `An error has occured: ${confResponse.status}`;\n    throw new Error(message);\n  }\n  if (!genresResponse.ok) {\n    const message = `An error has occured: ${genresResponse.status}`;\n    throw new Error(message);\n  }\n\n  const movies = await moviesResponse.json();\n  const configuration = await confResponse.json();\n  const genres = await genresResponse.json();\n  return [movies, configuration.images, genres.genres];\n}\n\nfetchMoviesAndCategories()\n  .then(([movies, configuration, genres]) => {\n    showMovieList(movies, configuration, genres);\n    // This is the way to find movie id after clicking to show modal window.\n    //console.log(document.querySelector('.movie-card').dataset.movieId);\n  })\n  .catch(error => {\n    console.error(\n      'movies or categories request failed. Error: ' + error.message\n    );\n  });\n\nfunction showMovieList(movies, configuration, genres) {\n  movies.results.forEach(movie => {\n    let title = movie.title;\n    let category = mapGenreIdsToName(movie.genre_ids, genres);\n    let year = movie.release_date.slice(0, 4);\n    let poster = configuration.base_url + 'w500' + movie.poster_path;\n    movieLibraryContainer.insertAdjacentHTML(\n      'beforeend',\n      `\n  <li class=\"movie-card\" data-movie-id=\"${movie.id}\" modal-open>\n    <img class=\"movie-card__img\" src=\"${poster}\" alt\"${title}\"/>\n    <div class=\"movie-card__description\">\n      <h2 class=\"movie-card__description--title\">${title}</h2>\n      <p class=\"movie-card__description--category\">${category} | ${year}</p>\n    </div>\n  </li>`\n    );\n    attachModal();\n  });\n}\n"],"names":["$bTcpz","parcelRequire","$d706c914d748cb55$var$movieLibraryContainer","document","querySelector","async","moviesResponse","confResponse","genresResponse","Promise","all","fetch","ok","message","status","Error","movies","json","configuration","genres","images","$d706c914d748cb55$var$fetchMoviesAndCategories","then","results","forEach","movie","title","category","ids","map","result","id","genre","find","x","name","undefined","push","join","$d706c914d748cb55$var$mapGenreIdsToName","genre_ids","year","release_date","slice","poster","base_url","poster_path","insertAdjacentHTML","attachModal","$d706c914d748cb55$var$showMovieList","catch","error","console"],"version":3,"file":"index.48aa20c3.js.map"}